[{"title":"近期刷题整理","date":"2022-02-10T09:04:58.000Z","url":"/2022/02/10/%E8%BF%91%E6%9C%9F%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86/","tags":[["算法","/tags/%E7%AE%97%E6%B3%95/"]],"categories":[["算法","/categories/%E7%AE%97%E6%B3%95/"]],"content":"整理一下近期刷题历程，各类题型及解题思路。 主要学习的算法包括以下: 二分法 双指针 滑动窗口 广度优先搜索/深度优先搜索 动态规划 位运算 递归/回溯 目前为止觉得最难的应该是递归/回溯了，非常抽象很难理解- -。 二分法原理很简单，在排序好的数组中每次都以中点进行大小判断并记录左右边界。对长度为n的数组进行排序的话时间复杂度一般为 O（logn）。 双指针通常有快慢指针和对撞指针的用法。对撞指针通常用于有序数组，分为左右两指针向中间遍历。 快慢指针则是两个指针从同一侧触发，以不同的策略前进，以LeetCode 141.环形链表为例,，判断给定链表中是否存在环，可以定义快慢两个指针，快指针每次增长一个，而慢指针每次增长两个，最后两个指针指向节点的值相等，则说明有环。就好像一个环形跑道上有一快一慢两个运动员赛跑，如果时间足够长，跑地快的运动员一定会赶上慢的运动员。 滑动窗口滑动窗口算法可以用以解决数组/字符串的子元素问题，它可以将嵌套的循环问题，转换为单循环问题，降低时间复杂度。通过维护一个长度为一定值的窗口(左右指针)来进行操作。 动态规划将一个问题拆分成一个同类型的子问题来求解。写出问题的状态转移方程是第一步。 BFS、DFS 广度优先搜索和深度优先搜索广度优先搜索基本与队列绑定，没遍历一个点就检测其周围符合条件的点并加入队列以进行下一步循环，根据不同情况也需要对遍历前后做标记区分。 深度优先搜索有回溯算法的思想。 递归/回溯这是个人感觉最难理解的算法了。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。 回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。 位运算对数值类型进行处理时很多时候可以通过位运算达到更高效更简洁的效果。例如 全数组的二分查找 中对相邻元素的查找的应用。0^1=1, 1^1=0, 3^1=2,2^=3 "},{"title":"离开日本前TODO整理","date":"2022-01-13T07:27:31.000Z","url":"/2022/01/13/%E7%A6%BB%E5%BC%80%E6%97%A5%E6%9C%AC%E5%89%8DTODO%E6%95%B4%E7%90%86/","categories":[["个人杂事","/categories/%E4%B8%AA%E4%BA%BA%E6%9D%82%E4%BA%8B/"]],"content":"本来可以写个便签就行的，不过这样记录一下也行。 四月初准备回国，回国前需要班里的手续整理一下。 还电脑契约类：1.房租 leopalace2.手机 softbank3.电 忘了4.气 忘了 银行方面：信用卡：三菱UFJ debit一张（无年金），seven银行一张（无年金）银行流水，也许有用 离职证明。 入境前： 中国入境提醒大使馆健康码申请材料： 接种证明，2日内核酸检测结果，东航是当日9点前提交1.根据中国海关总署要求：所有旅客须在抵达中国口岸前填写《健康申明卡》，并在抵达中国时出示。申报方法：1.关注“海关旅客指尖服务小程序”，完成电子《健康申明卡》申报。2.您也可选择通过中国海关官方网站进行健康申报。以上信息供您参考，建议您出行前了解当地赴华具体要求，以免耽误您的行程。感谢您的理解和支持！2.中国入境规定将根据疫情发展态势动态调整，您可通过各国当地移民局等政府官方渠道，了解入境最新信息，以免耽误您的行程。 乘机提示 : 尊敬的旅客，根据中国驻日本大使馆的通知，自2022年1月19日起，自日本搭乘航班赴华人员行前检测要求调整如下：（1）乘机前第7天进行一次核酸（PCR）预检测；（2）自预检测采样之日起，开始为期7天自我健康监测，并如实填写《自我健康状况监测表》（填写至登机前一天，驻日使馆官网下载）；（3）登机前48小时（2天）内（以采样日为准），完成新冠核酸和血清IgM抗体双检测；（4）预检测和乘机前双检测须在使领馆指定检测机构进行。在乘机前一天20：00前，一次性上传健康码申请材料。向中国驻日本国使领馆申领带“HS”（中国公民）或“HDC”（外国公民）标识的绿色健康码后乘机。 (5)日本机场不为中转乘客提供检测，请乘客切勿来日本转机。若确需从第三国（地区）经日本乘机赴华，请入境日本后进行14天自主隔离，签署《自我隔离管理承诺书》后再申请健康码。申请时请上传日本入境章。关于核酸检测、申领健康码等详细要求及其他注意事项，请务必通过大使馆官网  进行了解。 因各国出入境政策随时可能变化，请您及时关注当地政府、机场及大使馆发布的最新要求，并以有关部门发布的最新防控要求为准，提前准备好相关文件，以免耽误您的行程。感谢您的理解和支持！ 更新日期：2022年1月15日"},{"title":"react 高级特性 ->hooks\"","date":"2021-12-29T10:57:22.000Z","url":"/2021/12/29/react-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7-hooks/","tags":[["前端 react","/tags/%E5%89%8D%E7%AB%AF-react/"]],"categories":[["react","/categories/react/"]],"content":"最近项目里leader推荐使用一下react的高级特性，尝试了一下使用几个hook。 Hook 是 React 16.8 的新增特性，在不编写 class 的情况下使用 state 以及其他的 React 特性。 基础hook有三个： 1.useState 可以让你在函数里使用state 其中state，seteState，initialState分别为对应的state名，更新该state的函数，state的初始值。 2.useEffect该 Hook 接收一个包含命令式、且可能有副作用代码的函数。 很多时候你可以把它看作是react生命周期方法的替代，componentDidMount，componentDidUpdate都可以通过它来实现。 与 componentDidMount、componentDidUpdate 不同的是，传给 useEffect 的函数会在浏览器完成布局与绘制之后，在一个延迟事件中被调用。这使得它适用于许多常见的副作用场景，比如设置订阅和事件处理等情况，因为绝大多数操作不应阻塞浏览器对屏幕的更新。 然而，并非所有 effect 都可以被延迟执行。例如，一个对用户可见的 DOM 变更就必须在浏览器执行下一次绘制前被同步执行，这样用户才不会感觉到视觉上的不一致。（概念上类似于被动监听事件和主动监听事件的区别。）React 为此提供了一个额外的 useLayoutEffect Hook 来处理这类 effect。它和 useEffect 的结构相同，区别只是调用时机不同。 虽然 useEffect 会在浏览器绘制后延迟执行，但会保证在任何新的渲染前执行。在开始新的更新前，React 总会先清除上一轮渲染的 effect。 另外你可以通过添加第二个参数来限制它的触发条件，比如下例里的props.source发生变化时才会触发useEffect。 3.useContext接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 &lt;MyContext.Provider&gt; 的 value prop 决定。 Context是react用于在组件间共享数据的一种方式，在多重组件复用的场合会很有用，省去了很繁琐的显式的传递props。 当然，在组件层数并不复杂的情况下不实用也没有任何问题。 4.useRef 在函数式组件下是无法使用原先class组件下的REAct.creactRef函数的，想要操作dom的式样的话，需要使用这个hook。"},{"title":"leetcode刷题记录(2%)","date":"2021-12-29T08:52:33.000Z","url":"/2021/12/29/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/","tags":[["算法","/tags/%E7%AE%97%E6%B3%95/"]],"categories":[["算法","/categories/%E7%AE%97%E6%B3%95/"]],"content":" 预定三个月后回国，除了伴随着搬家的各种事项之外，也要开始面向面试刷题了。LeetCode Top Interview Questions 100今天是新年假期第一天，家里打扫完了之后开始做题！ 1.Two SumGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: Input: nums = [2,7,11,15], target = 9Output: [0,1]Output: Because nums[0] + nums[1] == 9, we return [0, 1]. 思路： 利用python 字典的in操作符来对迭代出的数和目标数的差进行判断 2.Add Two NumbersYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Example 1: Input: l1 = [2,4,3], l2 = [5,6,4]Output: [7,0,8]Explanation: 342 + 465 = 807. Example 2: Input: l1 = [0], l2 = [0]Output: [0]Example 3: Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]Output: [8,9,9,9,0,0,0,1] 主要考察链表的知识。 3. Longest Substring Without Repeating CharactersGiven a string s, find the length of the longest substring without repeating characters. Example 1:Input: s = “abcabcbb”Output: 3Explanation: The answer is “abc”, with the length of 3. Example 2:Input: s = “bbbbb”Output: 1Explanation: The answer is “b”, with the length of 1. "},{"title":"react如何给页面加title","date":"2021-04-26T12:04:01.000Z","url":"/2021/04/26/react%E5%A6%82%E4%BD%95%E7%BB%99%E9%A1%B5%E9%9D%A2%E5%8A%A0title/","tags":[["前端 react","/tags/%E5%89%8D%E7%AB%AF-react/"]],"categories":[["react","/categories/react/"]],"content":"上周接到一个需求: 将各个子画面的页面title显示出来html中是在&lt;head&gt;标签中进行title的定义的。但是在多重组件套用的情况下，需要额外进行实装，为此引入了React Helmet库。顾名思义，给你的页面加个头盔套在外面www。举个例子↓ 另外，子组件中定义的&lt;Helmet&gt;会覆盖母组件，所以只要在子组件定义之后，就可以不用管母组件title了。"},{"title":"滑动窗口","date":"2021-04-07T12:37:16.000Z","url":"/2021/04/07/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%AE%97%E6%B3%95/","tags":[["算法","/tags/%E7%AE%97%E6%B3%95/"]],"categories":[["算法","/categories/%E7%AE%97%E6%B3%95/"]],"content":"滑动窗口算法###使用场景 滑动窗口算法通常用来解决字符串子串的搜索或数组的子数组的检索，可以减少时间复杂度,leetcode刷题中大量可见。 ###leetcode 03 Given a string s, find the length of the longest substring without repeating characters. Example 1: Input: s = “abcabcbb” Output: 3 Explanation: The answer is “abc”, with the length of 3. ###python3解法 "},{"title":"webP格式","date":"2021-02-25T11:52:06.000Z","url":"/2021/02/25/webP/","tags":[["图片格式","/tags/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/"]],"categories":[["实用技术","/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/"]],"content":"相当怠惰的某人终于动了起来。ヽ(ー_ー)ノ webP格式是谷歌在2010年推出的新的图片格式。目的是在降低图片大小的同时能保证一定的图片质量。 本人p站收藏夹很大，如果想都放在自己的博客上的话，虽然说Github并没有对gitpage空间进行限制，但是有听说空间使用达到1G有邮件发过来通知的说法。 实际使用效果惊人，在使用XnConvert进行70%质量压缩的情况下，以单个图片文件为例，JPG→webP： 1700K → 81k。 并且图片实际观感并不会很差，24寸屏幕下不仔细观察的话几乎无法分辨，目前博客正在使用的图片基本都以目前这个比例进行压缩了，体验超级棒！"},{"title":"JPY_rate_monitor 日元汇率监控用脚本","date":"2020-06-04T13:21:27.000Z","url":"/2020/06/04/%E6%97%A5%E5%85%83%E6%B1%87%E7%8E%87%E7%9B%91%E6%8E%A7/","tags":[["脚本","/tags/%E8%84%9A%E6%9C%AC/"]],"categories":[["实用脚本","/categories/%E5%AE%9E%E7%94%A8%E8%84%9A%E6%9C%AC/"]],"content":"由于自己没有意识加上懒，不知不觉日元汇率跌了这么多都不知道，如果明年打算回国的话，自己的存款一定得在一个高点兑换掉比较好。 想了想采取一个笨办法，写个脚本自动获取每天日元兑人民币的汇率，加入电脑开机启动，给一个设定值，达到了后就弹窗提醒我这种形式（不选择发邮件的形式是因为基本不看自己的邮箱ヽ(ー_ー)ノ）。 搜了一下找了个接口:  会直接返回json格式的数据，处理起来很方便，python也只需要requests.get取一下即可。 由于是Win10系统，弹窗就用了win32api库，写好了直接丢启动文件里就行了。 "},{"title":"Markdown语法(标题)","date":"2020-06-02T14:25:49.000Z","url":"/2020/06/02/Markdown%E8%AF%AD%E6%B3%95(%E6%A0%87%E9%A2%98)/","tags":[["Markdown","/tags/Markdown/"]],"categories":[["日记","/categories/%E6%97%A5%E8%AE%B0/"]],"content":"这个是标题嘛，这里主要用来留下一和一些技术相关的内容 千里之行，始于足下。 今天是值得纪念的博客开张的第一天，从Markdown的语法开始学起(๑╹ヮ╹๑)ﾉ Studying makes me happy(カモシレナイ)。 主标题： ==【语法】主标题文字 空行 ==（两个及以上）【示例】主标题文字（最高阶标题）==【说明】相当于H1大纲标题效果，一般在首行应用和表示 副标题： 【语法】副标题文字 （空行） —减号两个及以上【示例】副标题文字（第二阶标题）–【说明】相当于H2大纲标题效果 H1~H6大纲标题【语法】#（空格）文字 或 #（空格）文字 （空格）#） （1-6等级分别在文字前加对应数量#，后面的#为可选，不加效果也一样。【示例】 H1H2H3H4H5H6 换行的话是段落末尾两次空格。"}]