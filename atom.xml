<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nanaya&#39;s Blog</title>
  
  <subtitle>随意评价他人是最大的傲慢</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-10T01:46:23.031Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>七夜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react 高级特性 -&gt;hooks&quot;</title>
    <link href="http://example.com/2021/12/29/react-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7-hooks/"/>
    <id>http://example.com/2021/12/29/react-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7-hooks/</id>
    <published>2021-12-29T10:57:22.000Z</published>
    <updated>2022-01-10T01:46:23.031Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目里leader推荐使用一下react的高级特性，尝试了一下使用几个hook。</p><p>Hook 是 React 16.8 的新增特性，在不编写 class 的情况下使用 state 以及其他的 React 特性。  </p><p>基础hook有三个：</p><p>1.useState  可以让你在函数里使用state  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [state, setState] &#x3D; useState(initialState);</span><br></pre></td></tr></table></figure><p>其中state，seteState，initialState分别为对应的state名，更新该state的函数，state的初始值。</p><p>2.useEffect<br>该 Hook 接收一个包含命令式、且可能有副作用代码的函数。  </p><p>很多时候你可以把它看作是react生命周期方法的替代，componentDidMount，componentDidUpdate都可以通过它来实现。  </p><p>与 componentDidMount、componentDidUpdate 不同的是，传给 useEffect 的函数会在浏览器完成布局与绘制之后，在一个延迟事件中被调用。这使得它适用于许多常见的副作用场景，比如设置订阅和事件处理等情况，因为绝大多数操作不应阻塞浏览器对屏幕的更新。</p><p>然而，并非所有 effect 都可以被延迟执行。例如，一个对用户可见的 DOM 变更就必须在浏览器执行下一次绘制前被同步执行，这样用户才不会感觉到视觉上的不一致。（概念上类似于被动监听事件和主动监听事件的区别。）React 为此提供了一个额外的 useLayoutEffect Hook 来处理这类 effect。它和 useEffect 的结构相同，区别只是调用时机不同。  </p><p>虽然 useEffect 会在浏览器绘制后延迟执行，但会保证在任何新的渲染前执行。在开始新的更新前，React 总会先清除上一轮渲染的 effect。  </p><p>另外你可以通过添加第二个参数来限制它的触发条件，比如下例里的props.source发生变化时才会触发useEffect。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">useEffect(</span><br><span class="line">  () &#x3D;&gt; &#123;</span><br><span class="line">    const subscription &#x3D; props.source.subscribe();</span><br><span class="line">    return () &#x3D;&gt; &#123;</span><br><span class="line">      subscription.unsubscribe();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  [props.source],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>3.useContext<br>接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 &lt;MyContext.Provider&gt; 的 value prop 决定。</p><p>Context是react用于在组件间共享数据的一种方式，在多重组件复用的场合会很有用，省去了很繁琐的显式的传递props。</p><p>当然，在组件层数并不复杂的情况下不实用也没有任何问题。</p><p>4.useRef</p><p>在函数式组件下是无法使用原先class组件下的REAct.creactRef函数的，想要操作dom的式样的话，需要使用这个hook。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近项目里leader推荐使用一下react的高级特性，尝试了一下使用几个hook。&lt;/p&gt;
&lt;p&gt;Hook 是 React 16.8 的新增特性，在不编写 class 的情况下使用 state 以及其他的 React 特性。  &lt;/p&gt;
&lt;p&gt;基础hook有三个：&lt;/p&gt;</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="前端 react" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF-react/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题记录(2%)</title>
    <link href="http://example.com/2021/12/29/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/12/29/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2021-12-29T08:52:33.000Z</published>
    <updated>2022-01-01T04:41:26.578Z</updated>
    
    <content type="html"><![CDATA[<hr><p>预定三个月后回国，除了伴随着搬家的各种事项之外，也要开始面向面试刷题了。<br>LeetCode Top Interview Questions 100<br>今天是新年假期第一天，家里打扫完了之后开始做题！  </p><hr><h2 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1.Two Sum"></a>1.Two Sum</h2><p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><p>You can return the answer in any order.</p><p>Example 1:</p><p>Input: nums = [2,7,11,15], target = 9<br>Output: [0,1]<br>Output: Because nums[0] + nums[1] == 9, we return [0, 1].</p><p>思路： 利用python 字典的in操作符来对迭代出的数和目标数的差进行判断</p><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; List[int]:</span></span><br><span class="line">    d =&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i,num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        <span class="keyword">if</span> target-num <span class="keyword">in</span> d:</span><br><span class="line">            <span class="keyword">return</span> [i,d[target -num]]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            d[num]=i</span><br></pre></td></tr></table></figure></code></pre><hr><h2 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2.Add Two Numbers"></a>2.Add Two Numbers</h2><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p>Example 1:</p><p>Input: l1 = [2,4,3], l2 = [5,6,4]<br>Output: [7,0,8]<br>Explanation: 342 + 465 = 807.</p><p>Example 2:</p><p>Input: l1 = [0], l2 = [0]<br>Output: [0]<br>Example 3:</p><p>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>Output: [8,9,9,9,0,0,0,1]</p><p>主要考察链表的知识。</p><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">    carry = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    root = result = ListNode(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span>(l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry != <span class="number">0</span>):</span><br><span class="line">        v1 = <span class="number">0</span></span><br><span class="line">        v2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> l1:</span><br><span class="line">            v1 = l1.val</span><br><span class="line">            l1 = l1.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l2:</span><br><span class="line">            v2 = l2.val</span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        sums = v1 + v2+carry</span><br><span class="line">        <span class="keyword">if</span>(sums &gt; <span class="number">9</span>):</span><br><span class="line">            result.<span class="built_in">next</span> = ListNode(val=sums % <span class="number">10</span>)</span><br><span class="line">            result = result.<span class="built_in">next</span></span><br><span class="line">            carry = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            result.<span class="built_in">next</span> = ListNode(val=sums)</span><br><span class="line">            result = result.<span class="built_in">next</span></span><br><span class="line">            carry = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root.<span class="built_in">next</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><hr><h2 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a>3. Longest Substring Without Repeating Characters</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;预定三个月后回国，除了伴随着搬家的各种事项之外，也要开始面向面试刷题了。&lt;br&gt;LeetCode Top Interview Questions 100&lt;br&gt;今天是新年假期第一天，家里打扫完了之后开始做题！  &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-Two-Su</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>react如何给页面加title</title>
    <link href="http://example.com/2021/04/26/react%E5%A6%82%E4%BD%95%E7%BB%99%E9%A1%B5%E9%9D%A2%E5%8A%A0title/"/>
    <id>http://example.com/2021/04/26/react%E5%A6%82%E4%BD%95%E7%BB%99%E9%A1%B5%E9%9D%A2%E5%8A%A0title/</id>
    <published>2021-04-26T12:04:01.000Z</published>
    <updated>2021-04-26T12:15:07.316Z</updated>
    
    <content type="html"><![CDATA[<p>上周接到一个需求: 将各个子画面的页面title显示出来<br>html中是在<code>&lt;head&gt;</code>标签中进行title的定义的。<br>但是在多重组件套用的情况下，需要额外进行实装，为此引入了React Helmet库。<br>顾名思义，给你的页面加个头盔套在外面www。<br>举个例子↓</p><hr><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Helmet&#125; <span class="keyword">from</span> <span class="string">&quot;react-helmet&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">&quot;application&quot;</span>&gt;</span><br><span class="line">            &lt;Helmet&gt;</span><br><span class="line">                &lt;meta charSet=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line">                &lt;title&gt;My Title&lt;/title&gt;</span><br><span class="line">                &lt;link rel=<span class="string">&quot;canonical&quot;</span> href=<span class="string">&quot;http://mysite.com/example&quot;</span> /&gt;</span><br><span class="line">            &lt;/Helmet&gt;</span><br><span class="line">            ...</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外，子组件中定义的<code>&lt;Helmet&gt;</code>会覆盖母组件，所以只要在子组件定义之后，就可以不用管母组件title了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上周接到一个需求: 将各个子画面的页面title显示出来&lt;br&gt;html中是在&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;标签中进行title的定义的。&lt;br&gt;但是在多重组件套用的情况下，需要额外进行实装，为此引入了React Helmet库。&lt;br&gt;顾名思义，给你的</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="前端 react" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF-react/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口</title>
    <link href="http://example.com/2021/04/07/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/04/07/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%AE%97%E6%B3%95/</id>
    <published>2021-04-07T12:37:16.000Z</published>
    <updated>2021-04-07T14:20:10.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滑动窗口算法"><a href="#滑动窗口算法" class="headerlink" title="滑动窗口算法"></a>滑动窗口算法</h1><p>###使用场景<br>  滑动窗口算法通常用来解决字符串子串的搜索或数组的子数组的检索，可以减少时间复杂度,leetcode刷题中大量可见。</p><hr><p>###leetcode<br>    03<br>    Given a string s, find the length of the longest substring without repeating characters.<br>    Example 1:<br>    Input: s = “abcabcbb”<br>    Output: 3<br>    Explanation: The answer is “abc”, with the length of 3.</p><hr><p>###python3解法<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; int:</span></span><br><span class="line">        savedchars=&#123;&#125;</span><br><span class="line">        start=max_length=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> savedchars <span class="keyword">and</span> savedchars[s[i]] &gt;=start:</span><br><span class="line">                start=savedchars[s[i]]+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                max_length=<span class="built_in">max</span>(max_length,i-start+<span class="number">1</span>)</span><br><span class="line">            savedchars[s[i]]=i</span><br><span class="line">        <span class="keyword">return</span> max_length</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;滑动窗口算法&quot;&gt;&lt;a href=&quot;#滑动窗口算法&quot; class=&quot;headerlink&quot; title=&quot;滑动窗口算法&quot;&gt;&lt;/a&gt;滑动窗口算法&lt;/h1&gt;&lt;p&gt;###使用场景&lt;br&gt;  滑动窗口算法通常用来解决字符串子串的搜索或数组的子数组的检索，可以减少时间复杂度,</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>webP格式</title>
    <link href="http://example.com/2021/02/25/webP/"/>
    <id>http://example.com/2021/02/25/webP/</id>
    <published>2021-02-25T11:52:06.000Z</published>
    <updated>2021-02-25T12:25:55.157Z</updated>
    
    <content type="html"><![CDATA[<p>相当怠惰的某人终于动了起来。ヽ(ー_ー)ノ</p><p>webP格式是谷歌在2010年推出的新的图片格式。<br>目的是在降低图片大小的同时能保证一定的图片质量。</p><p>本人p站收藏夹很大，如果想都放在自己的博客上的话，虽然说Github并没有对gitpage空间进行限制，但是有听说空间使用达到1G有邮件发过来通知的说法。</p><p>实际使用效果惊人，在使用XnConvert进行70%质量压缩的情况下，以单个图片文件为例，JPG→webP： 1700K → 81k。</p><p>并且图片实际观感并不会很差，24寸屏幕下不仔细观察的话几乎无法分辨，目前博客正在使用的图片基本都以目前这个比例进行压缩了，体验超级棒！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相当怠惰的某人终于动了起来。ヽ(ー_ー)ノ&lt;/p&gt;
&lt;p&gt;webP格式是谷歌在2010年推出的新的图片格式。&lt;br&gt;目的是在降低图片大小的同时能保证一定的图片质量。&lt;/p&gt;
&lt;p&gt;本人p站收藏夹很大，如果想都放在自己的博客上的话，虽然说Github并没有对gitpage空间</summary>
      
    
    
    
    <category term="实用技术" scheme="http://example.com/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="图片格式" scheme="http://example.com/tags/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JPY_rate_monitor 日元汇率监控用脚本</title>
    <link href="http://example.com/2020/06/04/%E6%97%A5%E5%85%83%E6%B1%87%E7%8E%87%E7%9B%91%E6%8E%A7/"/>
    <id>http://example.com/2020/06/04/%E6%97%A5%E5%85%83%E6%B1%87%E7%8E%87%E7%9B%91%E6%8E%A7/</id>
    <published>2020-06-04T13:21:27.000Z</published>
    <updated>2021-04-26T11:18:38.262Z</updated>
    
    <content type="html"><![CDATA[<p>由于自己没有意识加上懒，不知不觉日元汇率跌了这么多都不知道，如果明年打算回国的话，自己的存款一定得在一个高点兑换掉比较好。</p><p>想了想采取一个笨办法，写个脚本自动获取每天日元兑人民币的汇率，加入电脑开机启动，给一个设定值，达到了后就弹窗提醒我这种形式（不选择发邮件的形式是因为基本不看自己的邮箱ヽ(ー_ー)ノ）。</p><p>搜了一下找了个接口: <a href="https://api.exchangerate-api.com/v4/latest/JPY">https://api.exchangerate-api.com/v4/latest/JPY</a></p><p>会直接返回json格式的数据，处理起来很方便，python也只需要requests.get取一下即可。</p><p>由于是Win10系统，弹窗就用了win32api库，写好了直接丢启动文件里就行了。</p><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> win32api,win32con</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    time.sleep(<span class="number">60</span>)</span><br><span class="line">    response= requests.get(<span class="string">&quot;https://api.exchangerate-api.com/v4/latest/JPY&quot;</span>)</span><br><span class="line">    today_rate = Decimal(json.loads(response.text)[<span class="string">&quot;rates&quot;</span>][<span class="string">&quot;CNY&quot;</span>])</span><br><span class="line">    <span class="comment">##提醒OK消息框</span></span><br><span class="line">    <span class="keyword">if</span>(today_rate&gt;<span class="number">0.06</span>):</span><br><span class="line">        win32api.MessageBox(<span class="number">0</span>, <span class="built_in">str</span>(today_rate), <span class="string">&quot;今日日元汇率&quot;</span>,win32con.MB_OK)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于自己没有意识加上懒，不知不觉日元汇率跌了这么多都不知道，如果明年打算回国的话，自己的存款一定得在一个高点兑换掉比较好。&lt;/p&gt;
&lt;p&gt;想了想采取一个笨办法，写个脚本自动获取每天日元兑人民币的汇率，加入电脑开机启动，给一个设定值，达到了后就弹窗提醒我这种形式（不选择发邮件</summary>
      
    
    
    
    <category term="实用脚本" scheme="http://example.com/categories/%E5%AE%9E%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="脚本" scheme="http://example.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法(标题)</title>
    <link href="http://example.com/2020/06/02/Markdown%E8%AF%AD%E6%B3%95(%E6%A0%87%E9%A2%98)/"/>
    <id>http://example.com/2020/06/02/Markdown%E8%AF%AD%E6%B3%95(%E6%A0%87%E9%A2%98)/</id>
    <published>2020-06-02T14:25:49.000Z</published>
    <updated>2021-12-29T10:58:04.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这个是标题"><a href="#这个是标题" class="headerlink" title="这个是标题"></a>这个是标题</h1><p>嘛，这里主要用来留下一和一些技术相关的内容</p><p>千里之行，始于足下。</p><p>今天是值得纪念的博客开张的第一天，从Markdown的语法开始学起(๑╹ヮ╹๑)ﾉ Studying makes me happy<s>(カモシレナイ)</s>。</p><hr><h2 id="主标题："><a href="#主标题：" class="headerlink" title="主标题： =="></a>主标题： ==</h2><p>【语法】主标题文字 空行 ==（两个及以上）<br>【示例】<br>主标题文字（最高阶标题）<br>==<br>【说明】相当于H1大纲标题效果，一般在首行应用和表示</p><hr><h2 id="副标题："><a href="#副标题：" class="headerlink" title="副标题： "></a>副标题： </h2><p>【语法】副标题文字 （空行） —减号两个及以上<br>【示例】<br>副标题文字（第二阶标题）<br>–<br>【说明】相当于H2大纲标题效果</p><hr><p>H1~H6大纲标题<br>【语法】#（空格）文字 或 #（空格）文字 （空格）#） （1-6等级分别在文字前加对应数量#，后面的#为可选，不加效果也一样。<br>【示例】</p><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><h6 id="H6"><a href="#H6" class="headerlink" title="H6"></a>H6</h6><hr><p>换行的话是段落末尾两次空格。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;这个是标题&quot;&gt;&lt;a href=&quot;#这个是标题&quot; class=&quot;headerlink&quot; title=&quot;这个是标题&quot;&gt;&lt;/a&gt;这个是标题&lt;/h1&gt;&lt;p&gt;嘛，这里主要用来留下一和一些技术相关的内容&lt;/p&gt;
&lt;p&gt;千里之行，始于足下。&lt;/p&gt;
&lt;p&gt;今天是值得纪念的博客开</summary>
      
    
    
    
    <category term="日记" scheme="http://example.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
